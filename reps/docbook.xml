<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<book>
  <bookinfo>
    <title>Sega BS</title>

    <author>
      <firstname>Danil</firstname>

      <surname>Kharlamov</surname>

      <affiliation>
        <orgname>jjharlcontact@mail.ru</orgname>
      </affiliation>
    </author>

    <pubdate>07-02-2023</pubdate>
  </bookinfo>

  <chapter>
    <title>Документация к эмулятору Sega BS</title>

    <section>
      <title>Общее описание</title>

      <para><emphasis>Отличный мультиплатформенный эмулятор для
      Windows</emphasis></para>

      <para>Достоинства - высокая точность эмуляции, отсутствие game-hack'ов и
      великолепная совместимость с играми. Для получения звука максимально
      близкого к оригиналу, используйте опцию: Sound-&gt;SuperHQ. Главный же
      недостаток эмулятора, это продолжение его достоинств - высокие системные
      требования (для эмулятора Genesis).</para>
    </section>
  </chapter>

  <chapter>
    <title>Работа с эмулятором</title>

    <section>
      <title>Работа с эмулятором</title>

      <para><emphasis>Отличный</emphasis> мультиплатформенный эмулятор для
      Windows</para>

      <mediaobject>
        <imageobject>
          <imagedata fileref="image.jpg"/>
        </imageobject>

        <textobject>
          <phrase>Скриншот – вариант использования №1 – игра</phrase>
        </textobject>
      </mediaobject>

      <programlisting>
		/*
 * Change_File_S  - сохранение
 *
 * @param char *Dest
 * @param char *Dir
 */
int
Change_File_S (char *Dest, char *Dir)
{
  gchar *filename = NULL;
  GtkWidget *widget;
  gint res;
  widget =
    create_file_chooser_dialog ("Save state", GTK_FILE_CHOOSER_ACTION_SAVE);
//      fileselection_set_dir (fd.filesel, Rom_Dir);
  addStateFilter (widget);
  res = gtk_dialog_run (GTK_DIALOG (widget));
  if (res == GTK_RESPONSE_OK)
    {
      filename = gtk_file_chooser_get_filename (GTK_FILE_CHOOSER (widget));
    }
  gtk_widget_destroy (widget);

  if (filename != NULL)
    {
      strcpy (Dest, filename);
      g_free (filename);
      return 1;
    }
  return 0;
}

/*
 * Change_File_L  - загрузка
 *
 * @param char *Dest
 * @param char *Dir
 */
int
Change_File_L (char *Dest, char *Dir)
{
  gchar *filename = NULL;
  GtkWidget *widget;
  gint res;
  widget =
    create_file_chooser_dialog ("Load state", GTK_FILE_CHOOSER_ACTION_OPEN);
//      fileselection_set_dir (fd.filesel, Rom_Dir);
  addStateFilter (widget);
  res = gtk_dialog_run (GTK_DIALOG (widget));
  if (res == GTK_RESPONSE_OK)
    {
      filename = gtk_file_chooser_get_filename (GTK_FILE_CHOOSER (widget));
    }
  gtk_widget_destroy (widget);

  if (filename)
    {
      strcpy (Dest, filename);
      g_free (filename);
      return 1;
    }
  return 0;
}</programlisting>

      <para>Вверху представлена строка меню. Есть возможность
      сохранения/загрузки в меню File. Можно задать регион, опции, настроить
      управление.</para>

      <para>Поддерживаются ROMы формата .bin, .gen; также запакованные в
      .zip.</para>

      <mediaobject>
        <imageobject>
          <imagedata fileref="netplay.jpg"/>
        </imageobject>

        <textobject>
          <phrase>Скриншот – вариант использования №2 – игра по сети</phrase>
        </textobject>
      </mediaobject>

      <programlisting>
		int
Init_Network (void)
{
  Kaillera_HDLL = LoadLibrary ("kailleraclient.dll");

  if (Kaillera_HDLL != NULL)
    {
      Kaillera_Get_Version =
	(int (WINAPI *) (char *version)) GetProcAddress (Kaillera_HDLL,
							 "_kailleraGetVersion@4");
      Kaillera_Init =
	(int (WINAPI *) ()) GetProcAddress (Kaillera_HDLL, "_kailleraInit@0");
      Kaillera_Shutdown =
	(int (WINAPI *) ()) GetProcAddress (Kaillera_HDLL,
					    "_kailleraShutdown@0");
      Kaillera_Set_Infos =
	(int (WINAPI *) (kailleraInfos * infos))
	GetProcAddress (Kaillera_HDLL, "_kailleraSetInfos@4");
      Kaillera_Select_Server_Dialog =
	(int (WINAPI *) (HWND parent)) GetProcAddress (Kaillera_HDLL,
						       "_kailleraSelectServerDialog@4");
      Kaillera_Modify_Play_Values =
	(int (WINAPI *) (void *values, int size))
	GetProcAddress (Kaillera_HDLL, "_kailleraModifyPlayValues@8");
      Kaillera_Chat_Send =
	(int (WINAPI *) (char *text)) GetProcAddress (Kaillera_HDLL,
						      "_kailleraChatSend@4");
      Kaillera_End_Game =
	(int (WINAPI *) ()) GetProcAddress (Kaillera_HDLL,
					    "_kailleraEndGame@0");

      if ((Kaillera_Get_Version != NULL) and (Kaillera_Init != NULL)
	  and (Kaillera_Shutdown != NULL) and  (Kaillera_Set_Infos != NULL)
	  and (Kaillera_Select_Server_Dialog != NULL)
	  and (Kaillera_Modify_Play_Values != NULL)
	  and (Kaillera_Chat_Send != NULL) and  (Kaillera_End_Game != NULL))
	{
	  Kaillera_Init ();
	  Kaillera_Initialised = 1;
	  return 0;
	}

      FreeLibrary (Kaillera_HDLL);
    }

  Kaillera_Get_Version = Empty_Kaillera_Get_Version;
  Kaillera_Init = Empty_Kaillera_Init;
  Kaillera_Shutdown = Empty_Kaillera_Shutdown;
  Kaillera_Set_Infos = Empty_Kaillera_Set_Infos;
  Kaillera_Select_Server_Dialog = Empty_Kaillera_Select_Server_Dialog;
  Kaillera_Modify_Play_Values = Empty_Kaillera_Modify_Play_Values;
  Kaillera_Chat_Send = Empty_Kaillera_Chat_Send;
  Kaillera_End_Game = Empty_Kaillera_End_Game;

  Kaillera_Initialised = 0;
  return 1;
}</programlisting>

      <para>Для игры по сети используется сервер Kaillera.</para>
    </section>

    <section>
      <title>Работа с Sega CD</title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="image.jpg"/>
        </imageobject>
      </mediaobject>

      <mediaobject>
        <imageobject>
          <imagedata fileref="cd.png"/>
        </imageobject>

        <textobject>
          <phrase>Скриншот – вариант использования №3 – Sega CDA</phrase>
        </textobject>
      </mediaobject>

      <programlisting>
		void
Check_CD_Command (void)
{
#ifdef DEBUG_CD
  fprintf (debug_SCD_file, "CHECK CD COMMAND\n");
#endif

  // Check CDD

  if (CDD_Complete)
    {
      CDD_Complete = 0;

#ifdef DEBUG_CD
      fprintf (debug_SCD_file, "CDD exporting status\n");
      fprintf (debug_SCD_file,
	       "Status=%.4X, Minute=%.4X, Seconde=%.4X, Frame=%.4X, Ext=%.4X\n",
	       CDD.Status, CDD.Minute, CDD.Seconde, CDD.Frame, CDD.Ext);
#endif

      CDD_Export_Status ();

      if (Int_Mask_S68K and 0x10)
	sub68k_interrupt (4, -1);
    }

  // Check CDC

  if (SCD.Status_CDC and 1)	// CDC is reading data ...
    {
#ifdef DEBUG_CD
      fprintf (debug_SCD_file, "Send a read command\n");
#endif

      // DATA ?
      if (SCD.TOC.Tracks[SCD.Cur_Track - SCD.TOC.First_Track].Type)
	CDD.Control |= 0x0100;
      else
	CDD.Control and= ~0x0100;	// AUDIO

      if (File_Add_Delay == 0)
	{
	  if (CD_Load_System == CDROM_)
	    ASPI_Read_One_LBA_CDC ();
	  else
	    FILE_Read_One_LBA_CDC ();
	}
      else
	File_Add_Delay--;
    }

  if (SCD.Status_CDD == FAST_FOW)
    {
      SCD.Cur_LBA += 10;
      CDC_Update_Header ();

    }</programlisting>

      <para>Запуск CD-дисков.</para>
    </section>
  </chapter>
</book>
